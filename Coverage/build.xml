<!--Build file for RacingScore under JaCoCo-->
<!--Dylan Lassard, 21 April, 2021-->
	<project name="racingscore" default="report" xmlns:jacoco="antlib:org.jacoco.ant">

		<!-- directory configuration - if things are not working, start troubleshooting from here -->
		<property name="jacoco.dir" location="lib/" />
		<property name="src.dir" location="src/" />
		<property name="build.dir" location="bin/" />
		<property name="result.dir" location="./target" />
		<property name="result.report.dir" location="${result.dir}/site/jacoco" />
		<property name="result.exec.file" location="${result.dir}/jacoco.exec" />

		<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
			<classpath path="${jacoco.dir}/jacocoant.jar" />
		</taskdef>

		<!-- standard compile task, but turn debugging on for source viewing -->
		<target name="compile" description="compile the source">
			<mkdir dir="${build.dir}" />
			<javac srcdir="${src.dir}" destdir="${build.dir}" includeantruntime="false" debug="true" />
		</target>

		<!-- tests if new jacoco run is needed by checking if the jacoco.exec file is
	        newer than the class files or this build file -->
		<target name="checkRun">
			<uptodate property="run.notneeded" targetfile="${result.exec.file}">
				<srcfiles dir="${src.dir}" includes="**/*.java build.xml" />
			</uptodate>
		</target>

		<!-- official test example, merged with our code -->
		<target name="test" depends="compile,checkRun" unless="run.notneeded">
			<echo>run needed...</echo>
			<!-- Step 2: Wrap test execution with the JaCoCo coverage task 
		 this example has two runs, you'll need to perhaps
	        modify them, and then add more; this only runs if needed -->

			<!-- Tests for program RacingScore1: -->
			
			<!-- Test that produces a correct result when score1 < score2 and s > score3. -->
			<echo message="TEST RacingScore1: 8 9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
					<arg value="6" />
				</java>
			</jacoco:coverage>		
			
			<!-- Test that produces a correct result when all the input numbers are the same. -->
			<echo message="TEST RacingScore1: 8 8 8" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="8" />
					<arg value="8" />
				</java>
			</jacoco:coverage>
			
			<!-- Test that produces an error for the first input being a negative number. -->
		    <echo message="TEST RacingScore1: -8 9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="-8" />
					<arg value="9" />
					<arg value="6" />
				</java>		
			</jacoco:coverage>
		
			<!-- Test that produces an error for the second input being a negative number. -->
			<echo message="TEST RacingScore1: 8 -9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="-9" />
					<arg value="6" />
				</java>
			</jacoco:coverage>		
			
			<!-- Test that produces an error for the third input being a negative number. -->
		    <echo message="TEST RacingScore1: 8 9 -6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
					<arg value="-6" />
				</java>		
			</jacoco:coverage>		
			
			<!-- Test that produces an error for the first input being greater than 50. -->
		    <echo message="TEST RacingScore1: 80 9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="80" />
					<arg value="9" />
					<arg value="6" />
				</java>		
			</jacoco:coverage>
		
			<!-- Test that produces an error for the second input being greater than 50. -->
			<echo message="TEST RacingScore1: 8 90 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="90" />
					<arg value="6" />
				</java>
			</jacoco:coverage>		
			
			<!-- Test that produces an error for the third input being greater than 50. -->
		    <echo message="TEST RacingScore1: 8 9 60" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
					<arg value="60" />
				</java>		
			</jacoco:coverage>		
			
			<!-- Test that produces an error when the input is not a integer. -->
			<echo message="TEST RacingScore1: a 9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="a" />
					<arg value="9" />
					<arg value="6" />
				</java>
			</jacoco:coverage>		
			
			<!-- Test that produces an error when there is not 3 inputs. -->
		    <echo message="TEST RacingScore1: 8 9" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore1" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
				</java>		
			</jacoco:coverage>			
				
			<!-- Tests for program RacingScore2: -->
			
			<!-- Test that produces a correct result with score3 < score1 and score3 < score2. -->
			<echo message="TEST RacingScore2: 8 9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
					<arg value="6" />
				</java>
			</jacoco:coverage>		

			<!-- Test that produces a correct result with score3 < score1 and score3 < score2. --> 
			<echo message="TEST RacingScore2: 9 8 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="9" />
					<arg value="8" />
					<arg value="6" />
				</java>
			</jacoco:coverage>	

			<!-- Test that produces a correct result with score2 < score1 and score2 < score3. -->
			<echo message="TEST RacingScore2: 8 6 9" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="6" />
					<arg value="9" />
				</java>
			</jacoco:coverage>	

			<!-- Test that produces a correct result with score2 < score1 and score2 < score3. --> 
			<echo message="TEST RacingScore2: 9 6 8" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="9" />
					<arg value="6" />
					<arg value="8" />
				</java>
			</jacoco:coverage>		

			<!-- Test that produces a correct result with score1 < score2 and score1 < score3. -->
			<echo message="TEST RacingScore2: 6 9 8" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="6" />
					<arg value="9" />
					<arg value="8" />
				</java>
			</jacoco:coverage>	

			<!-- Test that produces a correct result with score1 < score2 and score1 < score3. -->
			<echo message="TEST RacingScore2: 6 8 9" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="6" />
					<arg value="8" />
					<arg value="9" />
				</java>
			</jacoco:coverage>
			
			<!-- Test that produces a correct result with score1, score2 and score 3 all being the same number. -->
			<echo message="TEST RacingScore2: 8 8 8" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="8" />
					<arg value="8" />
				</java>
			</jacoco:coverage>		
				
			<!-- Test that produces a correct result with score1 == score2. -->
			<echo message="TEST RacingScore2: 8 8 9" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
				<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="8" />
					<arg value="9" />
				</java>	
			</jacoco:coverage>	
			
			<!-- Test that produces a correct result with score2 == score3. -->
			<echo message="TEST RacingScore2: 9 8 8" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="9" />
					<arg value="8" />
					<arg value="8" />
				</java>
			</jacoco:coverage>	
			
			<!-- Test that produces a correct result with score3 == score1. -->
			<echo message="TEST RacingScore2: 8 9 8" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
					<arg value="8" />
				</java>
			</jacoco:coverage>	
			
			<!-- Test that produces an error for the first input being a negative number. -->
		    <echo message="TEST RacingScore2: -8 9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="-8" />
					<arg value="9" />
					<arg value="6" />
				</java>		
			</jacoco:coverage>
		
			<!-- Test that produces an error for the second input being a negative number. -->
			<echo message="TEST RacingScore2: 8 -9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="-9" />
					<arg value="6" />
				</java>
			</jacoco:coverage>		
			
			<!-- Test that produces an error for the third input being a negative number. -->
		    <echo message="TEST RacingScore2: 8 9 -6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
					<arg value="-6" />
				</java>		
			</jacoco:coverage>		
			
			<!-- Test that produces an error for the first input being greater than 50. -->
		    <echo message="TEST RacingScore2: 80 9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="80" />
					<arg value="9" />
					<arg value="6" />
				</java>		
			</jacoco:coverage>
		
			<!-- Test that produces an error for the second input being greater than 50. -->
			<echo message="TEST RacingScore2: 8 90 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="90" />
					<arg value="6" />
				</java>
			</jacoco:coverage>		
			
			<!-- Test that produces an error for the third input being greater than 50. -->
		    <echo message="TEST RacingScore2: 8 9 60" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
					<arg value="60" />
				</java>		
			</jacoco:coverage>		
			
			<!-- Test that produces an error when the input is not a integer. -->
			<echo message="TEST RacingScore2: a 9 6" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="a" />
					<arg value="9" />
					<arg value="6" />
				</java>
			</jacoco:coverage>		
			
			<!-- Test that produces an error when there is not 3 inputs. -->
		    <echo message="TEST RacingScore2: 8 9" />
			<jacoco:coverage destfile="${result.exec.file}">
				<java classname="edu.nmsu.cs.scoring.RacingScore2" fork="true">
					<classpath path="${build.dir}" />
					<arg value="8" />
					<arg value="9" />
				</java>		
			</jacoco:coverage>					
		</target>

		<target name="report" depends="test,checkReport" unless="report.notneeded">
			<echo>report needed...</echo>
			<!--  Step 3: Create coverage report  -->
			<jacoco:report>
				<!--
		 This task needs the collected execution data and ... 
		-->
				<executiondata>
					<file file="${result.exec.file}" />
				</executiondata>
				<!--  the class files and optional source files ...  -->
				<structure name="JaCoCo Ant Example">
					<classfiles>
						<fileset dir="${build.dir}" />
					</classfiles>
					<sourcefiles encoding="UTF-8">
						<fileset dir="${src.dir}" />
					</sourcefiles>
				</structure>
				<!--  to produce reports in different formats.  -->
				<html destdir="${result.report.dir}" />
				<csv destfile="${result.report.dir}/report.csv" />
				<xml destfile="${result.report.dir}/report.xml" />
			</jacoco:report>
		</target>

		<!-- tests if new jacoco report needs generated by checking if top report file
	        (index.html) is newer than the run data file (jacoco.exec) -->
		<target name="checkReport">
			<uptodate property="report.notneeded" targetfile="${result.report.dir}/index.html" srcfile="${result.exec.file}" />
		</target>

		<!-- clean up by removing all generated files; do "ant clean" to start afresh -->
		<target name="clean">
			<delete>
				<fileset dir="." includes="**/*.class **/jacoco.exec" />
			</delete>
			<delete dir="${result.report.dir}" />
		</target>

	</project>